 #include<stdio.h>
#include<iostream>
using namespace std;
typedef int elemtype;
int a; int A[26] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 };
int B[25] = { 1,3,6,10,15,21,28,36,45,55,66,78,91,105,120,136,153,171,190,210,231,253,277,302,328 };
typedef struct node
{
	int date;
	node *ichild, *rchild;
}node;
void inseart(node *&T, node *s)
{
	if (T == NULL)
	{
		T = s; T->ichild = NULL; T->rchild = NULL;
	}
	else if (s->date<T->date)
		inseart(T->ichild, s);
	else
		inseart(T->rchild, s);
}
bool bsearch(node *T, elemtype x)
{
	node *p = T;
	while (p!=NULL)
	{
		if (p->date == x)
			return true;
		if (x < p->date) 
			p = p->ichild;
		else
			p = p->rchild;
	}
	return false;
}
void deletenode(node *&T, elemtype x)
{
	node *p = T;
	while (p!= NULL)
	{
		if (p->date == x)
		{
			node *s = p;
			if (p->rchild!=NULL)
			{
				p = p->rchild;
				if (p->ichild != NULL)
				{
					while (p->ichild != NULL)
					{
						p = p->ichild;
						a = p->date;
					}
					s->date = a;
					p->date = -1;
					break;
				}
				else
				{
					a = p->date;
					s->date = a;
					p->date = -1;
				}
			}
			else
			{
				p->date = -1;
			}
		}
		
		if (x < (p->date))
			p = p->ichild;
		else
			p = p->rchild;
	}
}
void PreOrder(node *T)
{

	if (T != NULL&&T->date!=-1)
	{
		cout << T->date << " ";
		PreOrder(T->ichild);
		PreOrder(T->rchild);
	}
}
void InOrder(node *T)
{

	if (T != NULL && T->date != -1)
	{
		
		InOrder(T->ichild);
		cout << T->date << " ";
		InOrder(T->rchild);
	}
}
void balance(int low,int high,node *&T,int A[])
{
	if (low <= high)
	{
		int mid = (low + high) / 2;
		node *s; s = new node;
		s->date = A[mid];
		inseart(T, s);
		balance(low, mid - 1, T->ichild, A);
		balance(mid + 1, high, T->rchild, A);
	}
}

typedef int elemtype;
int Bisearch(elemtype A[],elemtype x,int low,int high)
{
	if(low>high)
	return -1;
	else
	{
		int mid=(low+high)/2;
		if(x==A[mid])
		return mid;
		else if(x<A[mid])
		return Bisearch(A,x,low,mid-1);
		else if(x>A[mid])
		return Bisearch(A,x,mid+1,high);
	}
}

int main()
{
	
		elemtype A[]={1,2,3,4,6,7,8,9,10,11,12,13,17,18,19,20,24,25,26,30,35,40,45,50,100};
	cout<<"请输入要查询的元素,'0'终止"<<endl;
	int n;cin>>n;
	while(n!=0)
	{
	int k=	Bisearch(A,n,0,24);
	cout<<"元素的位置为(-1为查找失败)"<<k<<endl;
	cin>>n;
	}
	node *T = NULL; node *s;
	cout << "通过插入结点构建二叉排序树" << endl;
	cout << "请输入要插入的元素(0为结束)" << endl;
	int v; cin >> v;
	while (v != 0)
	{
		s = new node;
		s->date = v;
		inseart(T, s);
		cin >> v;
	}
	cout << "先序遍历为";
	PreOrder(T);
	cout << endl;
	cout << "请输入要查找的元素(-1为终止)" << endl;
	int x; cin >> x;
	while (x!=-1)
	{
		bool judge = bsearch(T,x);
		if (judge)
		{
			cout << "查找成功" << endl;
		}
		else
		{
			cout << "查找失败" << endl;
		}
		cin >> x;
	}
	int n1;
	cout << "请输入要删除的结点的值(-1为结束)"<<endl;
	cin >> n1;
	while (n1 != -1)
	{
		deletenode(T, n1);
		cin >> n1;
	}
	cout << "删除后的先序遍历为" << endl;
	PreOrder(T);
	node *T1 = NULL; 
	balance(0, 24, T1, B);
	cout << "将数组转化为平衡二叉排序树中序遍历为" << endl;
	InOrder(T1);
}
